<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_CANMessageHandler" Id="{ad659beb-b876-4d1c-acaf-e86a9ddd6681}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CANMessageHandler
VAR_INPUT
	Outputs 	: REFERENCE TO CANTXQUEUESTRUCT_N_1; // CAN muuttujat
	Inputs 		: REFERENCE TO CANRXQUEUESTRUCT_N_1;
	
	fVoltage_A	: REAL; // Jännite A realina
	fVoltage_B	: REAL; // Jännite B realina
END_VAR
VAR
	i				: DINT;
	MessageReceived : CANQUEUE;
	MessageToSend	: CANQUEUE;
	NumberOfMessagesToSend	: UINT := 1;
	wV_a,wV_b		: WORD;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[wV_a := M_VoltageToWord(Voltage_In := fVoltage_A);
wV_b := M_VoltageToWord(Voltage_In := fVoltage_B);

MessageToSend := M_GenerateCANMessage(cobID := 4, V_a := wV_a, V_b := wV_b);

IF Outputs.TxCounter = Inputs.TxCounter THEN
   	Outputs.TxMessages[0] := MessageToSend;
    Outputs.NoOfTxMessages := NumberOfMessagesToSend;
    Outputs.TxCounter := Outputs.TxCounter + 1;
END_IF]]></ST>
    </Implementation>
    <Method Name="M_GenerateCANMessage" Id="{6a225896-93ec-4507-8246-94a3c5954a75}">
      <Declaration><![CDATA[METHOD M_GenerateCANMessage : CANQUEUE
VAR_INPUT
	cobID	: UINT;
	V_a		: WORD;
	V_b		: WORD;
END_VAR
VAR
	i,j 		: UINT;
	Tempdata	: USINT;
	V_DWORD		: WORD;
	tempMessage : CANMESSAGE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// WIP CAN Message writing.
(*
	Viestiin tulee Va ja Vb (ilmeisesti). Yksi CAN Frame on käytössä näille kahdelle muuttujalle.
	CANQUEUE Objekti on yksi CAN viesti, joka lähetetään COB ID:seen ja se sisältää 8 kpl UINT muuttujia, jotka varmaankin kirjoitetaan sarjassa, josta muodostuu se 64 bittinen CAN Frame.
	Ei kyllä ole kamalasti ideaa että missä järjestyksessä ne kirjoitetaan sinne. Eli pitäisi varmaankin testata. 
	Koodi on nyt silleensä että oletetaan että kirjoitetaan 7 -> 0. Jolloin 7:n data yksikön merkitsevin bitti on koko framen merkisevin
	Vastaavasti 0:n viimeinen bitti on koko framen viimeinen kirjoitettava bitti.
*)


M_GenerateCANMessage.cobId := cobID;

V_DWORD := V_a;
FOR j := 0 TO 1 DO // First part of frame reserved for V_a
	CASE j OF // ST is dumb language and doesnt allow looping for bit access.
		1:
			Tempdata.0 := V_DWORD.0;
			Tempdata.1 := V_DWORD.1;
			Tempdata.2 := V_DWORD.2;
			Tempdata.3 := V_DWORD.3;
			Tempdata.4 := V_DWORD.4;
			Tempdata.5 := V_DWORD.5;
			Tempdata.6 := V_DWORD.6;
			Tempdata.7 := V_DWORD.7;
			
		0:
			Tempdata.0 := V_DWORD.8;
			Tempdata.1 := V_DWORD.9;
			Tempdata.2 := V_DWORD.10;
			Tempdata.3 := V_DWORD.11;
			Tempdata.4 := V_DWORD.12;
			Tempdata.5 := V_DWORD.13;
			Tempdata.6 := V_DWORD.14;
			Tempdata.7 := V_DWORD.15;
	ELSE
		RETURN;
	END_CASE
	M_GenerateCANMessage.data[j] := Tempdata;
END_FOR

V_DWORD := V_b;
FOR j := 2 TO 3 DO // Second part is reserved for V_b
	CASE j OF // ST is dumb language and doesnt allow looping for bit access.
		3:
			Tempdata.0 := V_DWORD.0;
			Tempdata.1 := V_DWORD.1;
			Tempdata.2 := V_DWORD.2;
			Tempdata.3 := V_DWORD.3;
			Tempdata.4 := V_DWORD.4;
			Tempdata.5 := V_DWORD.5;
			Tempdata.6 := V_DWORD.6;
			Tempdata.7 := V_DWORD.7;
			
		2:
			Tempdata.0 := V_DWORD.8;
			Tempdata.1 := V_DWORD.9;
			Tempdata.2 := V_DWORD.10;
			Tempdata.3 := V_DWORD.11;
			Tempdata.4 := V_DWORD.12;
			Tempdata.5 := V_DWORD.13;
			Tempdata.6 := V_DWORD.14;
			Tempdata.7 := V_DWORD.15;
	ELSE
		RETURN;
	END_CASE
	M_GenerateCANMessage.data[j] := Tempdata;
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_VoltageToWord" Id="{2b790263-0f73-498c-8f3a-e90bfba913cf}">
      <Declaration><![CDATA[METHOD M_VoltageToWord : WORD
VAR_INPUT
	Voltage_In			: REAL; // Voltage input
END_VAR
VAR
	VoltageMultiplier	: REAL;
	MaxWordValue		: REAL := 16#FFFF;
	Voltage_High_Value 	: REAL := 0.866;
	Voltage_Low_Value	: REAL := -0.866;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check that voltage value is between min and max value.
IF Voltage_In > Voltage_High_Value THEN
	Voltage_In := Voltage_High_Value;
ELSIF Voltage_In < Voltage_Low_Value THEN
	Voltage_In := Voltage_Low_Value;
END_IF

VoltageMultiplier := (Voltage_In-Voltage_Low_Value)/(Voltage_High_Value-Voltage_Low_Value);

M_VoltageToWord := UINT_TO_WORD(REAL_TO_UINT(VoltageMultiplier*MaxWordValue));]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CANMessageHandler">
      <LineId Id="90" Count="8" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_CANMessageHandler.M_GenerateCANMessage">
      <LineId Id="17" Count="67" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CANMessageHandler.M_VoltageToWord">
      <LineId Id="16" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
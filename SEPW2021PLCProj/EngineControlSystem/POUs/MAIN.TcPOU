<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{bdfa0062-539d-4679-9449-b5aad24542ad}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// To controller
	fWRefPrep								: LREAL := 0;
	
	fThetaOl								: REAL := 0;
	
	// Encoder
	bHomingDoneEncoder						: BOOL;
	uEncoderOffset							: UINT;
	
	fCurrentMeasurement_V					: REAL; // Current measurement as voltage
	fCurrent_I								: REAL; // Current as A
	fMotorSpeed								: REAL;
	fThetaOut, fThetaElOut, fOmegaOut	 	: REAL;
	
	fVa, fVb								: REAL;
	
	bControlEnable							: BOOL := FALSE;
	bstartHoming							: BOOL := FALSE;
	bOpenLoop 								: BOOL := FALSE;
	bHomingDone 							: BOOL := FALSE;
	fHomingVa								: REAL := 0.5;
	fHomingVb								: REAL := 0;
	
	fbCAN_MessageHandler					: FB_CANMessageHandler();
	fbEncoder								: FB_Encoder();
	
	stInputs								: ST_Inputs;
	stOutputs								: ST_Outputs;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
//control_enable := 0;
IF bControlEnable THEN
	stOutputs.fControlEnable := 1;
ELSE	
	stOutputs.fControlEnable := 0;
END_IF 

stOutputs.fWref := fWRefPrep * 2;

stOutputs.fIa := F_VoltageToCurrentConvert(F_AnalogIntToVoltage(stInputs.uEL3702Ch1_In));
stOutputs.fIb := F_VoltageToCurrentConvert(F_AnalogIntToVoltage(stInputs.uEL3702Ch2_In));
stOutputs.fIc := F_VoltageToCurrentConvert(F_AnalogIntToVoltage(stInputs.uEL3702Ch3_In));

//IF ( Measurements.COUNTER_VALUE > Constants.PULSES_PER_REV ) AND (EL5101_CounterSetWORD.2 = FALSE) THEN
//	EL5101_CounterSet := Constants.PULSES_PER_REV - (16#FFFF - Measurements.COUNTER_VALUE);
//	EL5101_CounterSetWORD.2 := TRUE;
//ELSE
//	EL5101_CounterSetWORD.2 := FALSE;
//END_IF

fbEncoder(	fThetaMech => stOutputs.fThetaMech,
			fOmegaMech => stOutputs.fWmech
);
			
fVa := LREAL_TO_REAL(stInputs.fAlpha_U);
fVb := LREAL_TO_REAL(stInputs.fBeta_U);

IF bStartHoming AND ( NOT bHomingDone ) THEN
	stOutputs.fControlEnable := 0;
	//fbHomingTimer(DONE => homingDone);
	fbCAN_MessageHandler(Inputs := stInputs.Inputs, 
						Outputs := stOutputs.Outputs, 
						fVoltage_A := fHomingVa,
						fVoltage_B := fHomingVb);
						
	uEncoderOffset := stInputs.uEL5101_Counter;
	stOutputs.uEL5101_SetCounterValue := uEncoderOffset;
	stOutputs.bEL5101_SetCounter := TRUE;
	
	IF stInputs.bEL5101_CounterSet THEN
		bHomingDone := TRUE;
		stOutputs.bEL5101_SetCounter := FALSE;
	END_IF
END_IF

IF ( NOT bStartHoming ) AND bHomingDone THEN
	bHomingDoneEncoder := TRUE;
	
	IF bControlEnable THEN
		fbCAN_MessageHandler(Inputs := stInputs.Inputs, 
							Outputs := stOutputs.Outputs, 
							fVoltage_A := fVa,
							fVoltage_B := fVb);
	ELSIF bOpenLoop THEN
		fbCAN_MessageHandler(Inputs := stInputs.Inputs, 
							Outputs := stOutputs.Outputs, 
							fVoltage_A := SIN(fThetaOl),
							fVoltage_B := COS(fThetaOl));
		
		fThetaOl := fThetaOl + 2 * LREAL_TO_REAL( PI ) / 2500;
		IF fThetaOl > 2 * PI THEN
			fThetaOl := 0;
		END_IF
	END_IF
	
(*	
ELSE
	fbCAN_MessageHandler(	Inputs := Inputs, 
						Outputs := Outputs, 
						fVoltage_A := homingVa,
						fVoltage_B := homingVb);
	EL5101_CounterSet := 0;*)
END_IF]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="30" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="391" Count="2" />
      <LineId Id="390" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="324" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="335" Count="1" />
      <LineId Id="326" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="274" Count="2" />
      <LineId Id="273" Count="0" />
      <LineId Id="640" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="604" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="605" Count="1" />
      <LineId Id="641" Count="0" />
      <LineId Id="607" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="450" Count="0" />
      <LineId Id="509" Count="1" />
      <LineId Id="513" Count="2" />
      <LineId Id="511" Count="1" />
      <LineId Id="521" Count="2" />
      <LineId Id="519" Count="0" />
      <LineId Id="529" Count="4" />
      <LineId Id="518" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="516" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="165" Count="2" />
      <LineId Id="163" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="164" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
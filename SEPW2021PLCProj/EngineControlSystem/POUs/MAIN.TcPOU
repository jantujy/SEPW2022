<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{bdfa0062-539d-4679-9449-b5aad24542ad}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// To controller
	bInit									: BOOL;
	fWRefPrep								: LREAL;
	
	fThetaOl								: REAL;
	
	fVa, fVb								: REAL;
	
	bZeroingDone							: BOOL;
	tpIdRun									: TP;
	tpZeroingWaitTime						: TP;
	tZeroingWaitTime						: TIME := T#1S;
	tIdTime									: TIME := T#5S;
	fElZeroAngle							: LREAL;
	
	bControlEnable							: BOOL;
	bStartHoming							: BOOL;
	bOpenLoop 								: BOOL;
	bHomingDone 							: BOOL;
	fHomingVa								: REAL := 0.5;
	fHomingVb								: REAL := 0;
	
	fbCAN_MessageHandler					: FB_CANMessageHandler();
	fbEncoder								: FB_Encoder();
	
	fbController							: FB_Controller();
	
	stInputs								: ST_Inputs;
	stOutputs								: ST_Outputs;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Calling encoder and getting outputs and giving inputs
fbEncoder(	stInputs	:= stInputs,
			stOutputs	:= stOutputs,
			fThetaMech 	=> stOutputs.fTheta,
			fOmegaMech 	=> stOutputs.fWmech
);

// Id run to zero pulse location aka latch
IF NOT bZeroingDone THEN
	stOutputs.bEL5101_EnabledLatch := TRUE;
	
		fbCAN_MessageHandler(Inputs := stInputs.Inputs, 
							Outputs := stOutputs.Outputs, 
							fVoltage_A := SIN(fThetaOl),
							fVoltage_B := COS(fThetaOl));
		
		fThetaOl := fThetaOl + 2 * LREAL_TO_REAL( PI ) / 2500;
		IF fThetaOl > 2 * PI THEN
			fThetaOl := 0;
		END_IF
	
	IF stInputs.bEL5101_LatchValid THEN
		stOutputs.nEL5101_SetCounterValue := stInputs.nEL5101_LatchValue;
		stOutputs.bEL5101_SetCounter := TRUE;
		bZeroingDone := stInputs.bEL5101_CounterSet;
		stOutputs.bEL5101_EnabledLatch := FALSE;
		bStartHoming := TRUE;
	END_IF
END_IF

tpZeroingWaitTime( IN := bStartHoming, PT := tZeroingWaitTime );

// Homing
IF bStartHoming AND NOT bHomingDone AND NOT tpZeroingWaitTime.Q THEN
	tpIdRun( IN := bStartHoming, PT := tIdTime );
	stOutputs.fControlEnable := 0;
	fbCAN_MessageHandler(Inputs := stInputs.Inputs, 
						Outputs := stOutputs.Outputs, 
						fVoltage_A := fHomingVa,
						fVoltage_B := fHomingVb);
	
	IF NOT tpIdRun.Q THEN
		fElZeroAngle := fbEncoder.fThetaMech;
		bHomingDone := TRUE;
	END_IF
END_IF

// Enabling for old controller
IF bControlEnable THEN
	stOutputs.fControlEnable := 1;
ELSE	
	stOutputs.fControlEnable := 0;
END_IF 

// Getting controller outputs and giving inputs
fbController.speedrefrpm := fWRefPrep;

fbController.anglerad := -1 * ( fbEncoder.fThetaMech - fElZeroAngle );
// Multiplying the mechanical speed with number of pole pairs gives us the electrical field rotation speed
fbController.speedmeasrad := -1 * fbEncoder.fOmegaMech * 2;

fbController.Current_abc[0] := stInputs.nEL3702Ch1_In;
fbController.Current_abc[1] := stInputs.nEL3702Ch2_In;
fbController.Current_abc[2] := stInputs.nEL3702Ch3_In;

// Controller init
IF NOT bInit THEN
	fbController( ssMethodType := SS_INITIALIZE );
	bInit := TRUE;
END_IF

// Scaling of 0.9 used because svpwm doesnt like full 1 and the scaling in controller uses 400 V which is also the saturation point
fVa := LREAL_TO_REAL(fbController.Voltageoutalphabeta[0] * 0.9);
fVb := LREAL_TO_REAL(fbController.Voltageoutalphabeta[1] * 0.9);

// Enabling controller or open loop
IF bHomingDone THEN
	IF bControlEnable THEN
		IF bInit THEN
			fbController( ssMethodType := SS_STEP );
		END_IF
		fbCAN_MessageHandler(Inputs := stInputs.Inputs, 
							Outputs := stOutputs.Outputs, 
							fVoltage_A := fVa,
							fVoltage_B := fVb);
	ELSIF bOpenLoop THEN
		fbCAN_MessageHandler(Inputs := stInputs.Inputs, 
							Outputs := stOutputs.Outputs, 
							fVoltage_A := SIN(fThetaOl),
							fVoltage_B := COS(fThetaOl));
		
		fThetaOl := fThetaOl + 2 * LREAL_TO_REAL( PI ) / 2500;
		IF fThetaOl > 2 * PI THEN
			fThetaOl := 0;
		END_IF
	END_IF
END_IF]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1257" Count="0" />
      <LineId Id="796" Count="0" />
      <LineId Id="879" Count="0" />
      <LineId Id="878" Count="0" />
      <LineId Id="797" Count="1" />
      <LineId Id="1086" Count="0" />
      <LineId Id="1062" Count="0" />
      <LineId Id="1078" Count="0" />
      <LineId Id="1064" Count="0" />
      <LineId Id="1097" Count="0" />
      <LineId Id="1099" Count="7" />
      <LineId Id="1087" Count="0" />
      <LineId Id="1096" Count="0" />
      <LineId Id="1066" Count="3" />
      <LineId Id="1098" Count="0" />
      <LineId Id="1137" Count="0" />
      <LineId Id="1070" Count="0" />
      <LineId Id="952" Count="0" />
      <LineId Id="1151" Count="1" />
      <LineId Id="1258" Count="0" />
      <LineId Id="802" Count="1" />
      <LineId Id="986" Count="0" />
      <LineId Id="804" Count="0" />
      <LineId Id="806" Count="2" />
      <LineId Id="1127" Count="0" />
      <LineId Id="989" Count="0" />
      <LineId Id="987" Count="0" />
      <LineId Id="1133" Count="0" />
      <LineId Id="992" Count="0" />
      <LineId Id="914" Count="0" />
      <LineId Id="819" Count="0" />
      <LineId Id="1259" Count="0" />
      <LineId Id="1155" Count="5" />
      <LineId Id="1260" Count="0" />
      <LineId Id="1161" Count="1" />
      <LineId Id="1170" Count="0" />
      <LineId Id="1169" Count="0" />
      <LineId Id="1263" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1163" Count="2" />
      <LineId Id="1154" Count="0" />
      <LineId Id="1204" Count="0" />
      <LineId Id="1210" Count="0" />
      <LineId Id="1208" Count="0" />
      <LineId Id="1213" Count="1" />
      <LineId Id="1212" Count="0" />
      <LineId Id="1262" Count="0" />
      <LineId Id="1167" Count="1" />
      <LineId Id="1166" Count="0" />
      <LineId Id="1261" Count="0" />
      <LineId Id="820" Count="1" />
      <LineId Id="824" Count="0" />
      <LineId Id="1253" Count="0" />
      <LineId Id="1255" Count="1" />
      <LineId Id="825" Count="14" />
      <LineId Id="164" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>